// src/utils/contentExportUtils.js
/**
 * Professional content export utilities for generated academic papers
 * Provides formatted Word documents with headers, footers, and proper styling
 */

import {
  Document,
  Packer,
  Paragraph,
  TextRun,
  HeadingLevel,
  AlignmentType,
  PageBreak,
  Header,
  Footer,
  PageNumber,
  BorderStyle,
  convertInchesToTwip
} from 'docx';
import { wordExportConfig } from '../config/wordExportConfig';

const STYLES = {
  fonts: wordExportConfig.typography.fonts,
  colors: wordExportConfig.colors,
  spacing: wordExportConfig.spacing,
  sizes: wordExportConfig.typography.sizes
};

/**
 * Creates document header for generated content
 */
const createContentHeader = (title) => {
  return new Header({
    children: [
      new Paragraph({
        children: [
          new TextRun({
            text: title.length > 60 ? title.substring(0, 57) + '...' : title,
            font: STYLES.fonts.heading,
            size: STYLES.sizes.footer,
            color: STYLES.colors.secondary
          })
        ],
        alignment: AlignmentType.CENTER,
        border: {
          bottom: {
            color: STYLES.colors.accent,
            space: 1,
            size: 6,
            style: BorderStyle.SINGLE
          }
        },
        spacing: {
          after: 120
        }
      })
    ]
  });
};

/**
 * Creates document footer with page numbers and branding
 */
const createContentFooter = () => {
  return new Footer({
    children: [
      new Paragraph({
        children: [
          new TextRun({
            text: `Generated by ${wordExportConfig.branding.companyName}`,
            font: STYLES.fonts.body,
            size: STYLES.sizes.footer,
            color: STYLES.colors.secondary
          }),
          new TextRun({
            text: "\t\t",
          }),
          new TextRun({
            children: ["Page ", PageNumber.CURRENT, " of ", PageNumber.TOTAL_PAGES],
            font: STYLES.fonts.body,
            size: STYLES.sizes.footer,
            color: STYLES.colors.secondary
          })
        ],
        alignment: AlignmentType.CENTER,
        border: {
          top: {
            color: STYLES.colors.accent,
            space: 1,
            size: 6,
            style: BorderStyle.SINGLE
          }
        },
        spacing: {
          before: 120
        }
      })
    ]
  });
};

/**
 * Creates title page for the generated content
 */
const createContentTitlePage = (title, metadata = {}) => {
  const {
    documentType = 'Research Paper',
    citationStyle = 'APA',
    wordCount = null,
    author = null
  } = metadata;

  return [
    new Paragraph({
      children: [
        new TextRun({
          text: title,
          font: STYLES.fonts.heading,
          size: 44,
          color: STYLES.colors.primary,
          bold: true
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        before: convertInchesToTwip(3),
        after: convertInchesToTwip(1)
      }
    }),
    ...(author ? [
      new Paragraph({
        children: [
          new TextRun({
            text: author,
            font: STYLES.fonts.body,
            size: 28,
            color: STYLES.colors.secondary
          })
        ],
        alignment: AlignmentType.CENTER,
        spacing: {
          after: convertInchesToTwip(0.5)
        }
      })
    ] : []),
    new Paragraph({
      children: [
        new TextRun({
          text: documentType,
          font: STYLES.fonts.body,
          size: 24,
          color: STYLES.colors.secondary,
          italics: true
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        after: convertInchesToTwip(0.3)
      }
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: `Citation Style: ${citationStyle}`,
          font: STYLES.fonts.body,
          size: 22,
          color: STYLES.colors.secondary
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        after: convertInchesToTwip(0.2)
      }
    }),
    ...(wordCount ? [
      new Paragraph({
        children: [
          new TextRun({
            text: `${wordCount.toLocaleString()} words`,
            font: STYLES.fonts.body,
            size: 22,
            color: STYLES.colors.secondary
          })
        ],
        alignment: AlignmentType.CENTER,
        spacing: {
          after: convertInchesToTwip(0.5)
        }
      })
    ] : []),
    new Paragraph({
      children: [
        new TextRun({
          text: new Date().toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          }),
          font: STYLES.fonts.body,
          size: 22,
          color: STYLES.colors.secondary
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        after: convertInchesToTwip(2)
      }
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: "AI-Generated Content",
          font: STYLES.fonts.body,
          size: 18,
          color: STYLES.colors.secondary,
          italics: true
        })
      ],
      alignment: AlignmentType.CENTER,
      spacing: {
        after: convertInchesToTwip(0.1)
      }
    }),
    new Paragraph({
      children: [
        new TextRun({
          text: "Created with ScholarlyAI",
          font: STYLES.fonts.body,
          size: 18,
          color: STYLES.colors.secondary,
          italics: true
        })
      ],
      alignment: AlignmentType.CENTER
    }),
    new Paragraph({
      children: [new PageBreak()]
    })
  ];
};

/**
 * Parse markdown-style content into structured paragraphs with formatting
 */
const parseContentToParagraphs = (content) => {
  const paragraphs = [];
  const lines = content.split('\n');

  let i = 0;
  while (i < lines.length) {
    const line = lines[i].trim();

    // Skip empty lines
    if (!line) {
      i++;
      continue;
    }

    // Handle H2 headings (## Heading)
    if (line.startsWith('## ')) {
      const headingText = line.replace(/^##\s+/, '');
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: headingText,
              font: STYLES.fonts.heading,
              size: 32,
              color: STYLES.colors.primary,
              bold: true
            })
          ],
          heading: HeadingLevel.HEADING_1,
          spacing: {
            before: STYLES.spacing.beforeHeading,
            after: STYLES.spacing.afterHeading
          },
          border: {
            bottom: {
              color: STYLES.colors.accent,
              space: 1,
              size: 8,
              style: BorderStyle.SINGLE
            }
          }
        })
      );
      i++;
      continue;
    }

    // Handle H3 headings (### Heading)
    if (line.startsWith('### ')) {
      const headingText = line.replace(/^###\s+/, '');
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: headingText,
              font: STYLES.fonts.heading,
              size: 28,
              color: STYLES.colors.primary,
              bold: true
            })
          ],
          heading: HeadingLevel.HEADING_2,
          spacing: {
            before: STYLES.spacing.beforeHeading - 120,
            after: STYLES.spacing.afterHeading - 60
          }
        })
      );
      i++;
      continue;
    }

    // Handle bullet points
    if (line.startsWith('- ') || line.startsWith('* ')) {
      const bulletText = line.replace(/^[-*]\s+/, '');
      paragraphs.push(
        new Paragraph({
          children: [
            new TextRun({
              text: `â€¢ ${bulletText}`,
              font: STYLES.fonts.body,
              size: 24
            })
          ],
          alignment: AlignmentType.JUSTIFIED,
          spacing: {
            after: 120,
            line: STYLES.spacing.line
          },
          indent: {
            left: convertInchesToTwip(0.25),
            hanging: convertInchesToTwip(0.15)
          }
        })
      );
      i++;
      continue;
    }

    // Regular paragraph with inline formatting support
    paragraphs.push(createFormattedParagraph(line));
    i++;
  }

  return paragraphs;
};

/**
 * Creates a paragraph with inline bold and italic formatting
 */
const createFormattedParagraph = (text) => {
  const children = [];
  let currentText = text;

  // Simple regex for bold (**text**) and italic (*text*)
  const boldRegex = /\*\*(.*?)\*\*/g;
  const italicRegex = /\*(.*?)\*/g;

  // Split by bold first
  const boldParts = currentText.split(boldRegex);

  for (let i = 0; i < boldParts.length; i++) {
    if (i % 2 === 0) {
      // Normal or italic text
      const italicParts = boldParts[i].split(italicRegex);
      for (let j = 0; j < italicParts.length; j++) {
        if (italicParts[j]) {
          children.push(
            new TextRun({
              text: italicParts[j],
              font: STYLES.fonts.body,
              size: 24,
              italics: j % 2 === 1
            })
          );
        }
      }
    } else {
      // Bold text
      children.push(
        new TextRun({
          text: boldParts[i],
          font: STYLES.fonts.body,
          size: 24,
          bold: true
        })
      );
    }
  }

  return new Paragraph({
    children: children.length > 0 ? children : [
      new TextRun({
        text: text,
        font: STYLES.fonts.body,
        size: 24
      })
    ],
    alignment: AlignmentType.JUSTIFIED,
    spacing: {
      after: STYLES.spacing.paragraph,
      line: STYLES.spacing.line
    }
  });
};

/**
 * Main export function for generated content
 */
export const exportGeneratedContent = async (job, options = {}) => {
  const {
    includeTitlePage = true,
    includeHeaders = true,
    includeFooters = true
  } = options;

  try {
    const title = job.outline?.title || 'Generated Content';
    const content = job.content || '';

    // Calculate word count
    const wordCount = content.split(/\s+/).filter(w => w.length > 0).length;

    // Metadata from job settings
    const metadata = {
      documentType: job.settings?.document_type ?
        job.settings.document_type.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) :
        'Research Paper',
      citationStyle: job.settings?.citation_style || 'APA',
      wordCount: wordCount,
      author: null // Could add user name here if available
    };

    const children = [];

    // Add title page
    if (includeTitlePage) {
      children.push(...createContentTitlePage(title, metadata));
    }

    // Parse and add content
    children.push(...parseContentToParagraphs(content));

    // Create document
    const doc = new Document({
      sections: [{
        properties: {
          page: {
            margin: {
              top: convertInchesToTwip(1),
              right: convertInchesToTwip(1),
              bottom: convertInchesToTwip(1),
              left: convertInchesToTwip(1),
            }
          }
        },
        headers: includeHeaders ? {
          default: createContentHeader(title)
        } : undefined,
        footers: includeFooters ? {
          default: createContentFooter()
        } : undefined,
        children: children
      }],
      styles: {
        default: {
          heading1: {
            run: {
              font: STYLES.fonts.heading,
              size: 32,
              bold: true,
              color: STYLES.colors.primary
            },
            paragraph: {
              spacing: {
                before: STYLES.spacing.beforeHeading,
                after: STYLES.spacing.afterHeading
              }
            }
          },
          heading2: {
            run: {
              font: STYLES.fonts.heading,
              size: 28,
              bold: true,
              color: STYLES.colors.primary
            },
            paragraph: {
              spacing: {
                before: STYLES.spacing.beforeHeading - 120,
                after: STYLES.spacing.afterHeading - 60
              }
            }
          },
          document: {
            run: {
              font: STYLES.fonts.body,
              size: 24
            },
            paragraph: {
              spacing: {
                line: STYLES.spacing.line,
                after: STYLES.spacing.paragraph
              }
            }
          }
        }
      }
    });

    // Generate and download
    const blob = await Packer.toBlob(doc);
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${job.id}.docx`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error('Error exporting generated content:', error);
    throw error;
  }
};
