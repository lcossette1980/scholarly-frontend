// src/utils/exportUtils.js
export const exportToBibliography = (entries, format = 'word') => {
    const formatEntry = (entry) => {
      let formatted = '';
      
      // Citation
      formatted += `${entry.citation}\n\n`;
      
      // Narrative Overview
      if (entry.narrative_overview) {
        formatted += `Narrative Overview\n${entry.narrative_overview}\n\n`;
      }
      
      // Research Components
      if (entry.research_components) {
        formatted += `Key Research Components\n`;
        if (entry.research_components.research_purpose) {
          formatted += `Research Purpose:\n${entry.research_components.research_purpose}\n\n`;
        }
        if (entry.research_components.methodology) {
          formatted += `Methodology:\n${entry.research_components.methodology}\n\n`;
        }
        if (entry.research_components.theoretical_framework) {
          formatted += `Theoretical Framework:\n${entry.research_components.theoretical_framework}\n\n`;
        }
      }
      
      // Core Findings
      if (entry.core_findings) {
        formatted += `Core Findings & Key Statistics\n${entry.core_findings}\n\n`;
      }
      
      // Methodological Value
      if (entry.methodological_value) {
        formatted += `Methodological Value\n`;
        if (entry.methodological_value.strengths) {
          formatted += `Strengths:\n${entry.methodological_value.strengths}\n\n`;
        }
        if (entry.methodological_value.limitations) {
          formatted += `Limitations:\n${entry.methodological_value.limitations}\n\n`;
        }
      }
      
      // Key Quotes
      if (entry.key_quotes && entry.key_quotes.length > 0) {
        formatted += `Key Quotes\n`;
        entry.key_quotes.forEach((quote, index) => {
          formatted += `${index + 1}. "${quote.text}" (p. ${quote.page})\n`;
        });
        formatted += '\n';
      }
      
      return formatted;
    };
  
    if (format === 'word') {
      let document = '';
      
      // Title page
      document += `ANNOTATED BIBLIOGRAPHY\n\n`;
      document += `Generated by ScholarlyAI\n`;
      document += `Date: ${new Date().toLocaleDateString()}\n`;
      document += `Total Entries: ${entries.length}\n\n`;
      document += `${'='.repeat(50)}\n\n`;
      
      // Entries
      entries.forEach((entry, index) => {
        document += `ENTRY ${index + 1}\n`;
        document += `${'-'.repeat(20)}\n\n`;
        document += formatEntry(entry);
        document += `\n${'='.repeat(50)}\n\n`;
      });
      
      // Create and download
      const blob = new Blob([document], { type: 'application/msword' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `annotated-bibliography-${Date.now()}.doc`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      return true;
    }
    
    return false;
  };